# Instant prompt preamble (must be first)
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Console output commands (now safe!)
[[ $(command -v fastfetch) ]] && fastfetch --size-binary-prefix JEDEC

# XDG Base Directories
export XDG_DATA_HOME=$HOME/.local/share
export XDG_CONFIG_HOME=$HOME/.config
export XDG_STATE_HOME=$HOME/.local/state
export XDG_CACHE_HOME=$HOME/.cache

# Locale and terminal settings
export LANG=en_CA.UTF-8
export LC_ALL=en_CA.UTF-8
export TERM=xterm-256color

# Path setup (chezmoi template logic)
# WSL Path Management - prioritize Linux binaries over Windows
if [[ -n "${WSL_DISTRO_NAME:-}" ]] || [[ -n "${WSL_INTEROP:-}" ]]; then
    # Remove Windows paths that might interfere with Linux development tools
    export PATH=$(echo "$PATH" | tr ':' '\n' | grep -v '/mnt/[a-z]/' | tr '\n' ':' | sed 's/:$//')
fi

# Prioritize snap binaries and local installations
export PATH="/snap/bin:$HOME/.local/bin:$PATH"

# Add local npm global bin to PATH (but after snap)
if [[ -d "$HOME/.local/npm-global/bin" ]]; then
    export PATH="$PATH:$HOME/.local/npm-global/bin"
fi

# Path setup (chezmoi template logic)
{{- $paths := list }}
{{- $homeDir := .chezmoi.homeDir }}
{{- range $_, $relPath := list "bin" "usr/local/bin" "usr/local/go/bin" ".cargo/bin" ".local/bin" }}
{{    $path := joinPath $homeDir $relPath }}
{{-   if stat $path }}
{{-     $paths = mustAppend $paths $path }}
{{-   end }}
{{- end }}
{{- if $paths }}
export PATH={{ toStrings $paths | join ":" }}:$PATH
{{- end }}

# Oh-my-zsh setup
export ZSH=$HOME/.oh-my-zsh
ZSH_THEME="powerlevel10k/powerlevel10k"
CASE_SENSITIVE="true"
DISABLE_AUTO_UPDATE="true"
HIST_STAMPS="yyyy-mm-dd"
ZSH_DISABLE_COMPFIX=true

# Plugins
plugins=(
{{- $zshPlugins := or .zshPlugins (list) -}}
{{- range $zshPlugins }}
{{ . }}
{{- end }}
)

source $ZSH/oh-my-zsh.sh

# User configuration
PROMPT="%{$fg[white]%}%n@%{$fg[green]%}%m%{$reset_color%} ${PROMPT}"

setopt autocd
setopt histignorespace
setopt rm_star_silent

# Load aliases and functions
[[ -f ~/.zsh/aliases.zsh ]] && source ~/.zsh/aliases.zsh
[[ -f ~/.zsh/functions.zsh ]] && source ~/.zsh/functions.zsh

alias g=git
alias gnp="git --no-pager"
{{- if lookPath "bat" }}
alias cat=bat
{{- else if lookPath "batcat" }}
alias cat=batcat
{{- end }}
{{- if lookPath "fdfind" }}
alias fd=fdfind
{{- end }}
{{- if lookPath "eza" }}
alias ls=eza
{{- end }}

{{ if stat (printf "%s/.local/bin/nvim" .chezmoi.homeDir) -}}
export EDITOR=$HOME/.local/bin/nvim
{{ else if lookPath "nvim" -}}
export EDITOR=nvim
{{ else -}}
export EDITOR=vim
{{ end -}}

# Bitwarden field helper
bitwardenField() {
  # Usage: bitwardenField <item_name> <field_path>
  local item="$1"
  local field="$2"
  bw get item "$item" | jq -r "$field" 2>/dev/null || echo ""
}

{{ if not .ephemeral -}}
# Bitwarden CLI setup with snap preference
if command -v bw >/dev/null 2>&1; then
  BW_PATH=$(which bw)

  # Prefer snap installation
  if [[ "$BW_PATH" == /snap/* ]]; then
    if ! bw status | grep -q "authenticated" 2>/dev/null; then
      echo "üîê Bitwarden CLI (snap) available but not authenticated"
      echo "Run 'bw login' to authenticate when ready"
    else
      if command -v jq >/dev/null 2>&1; then
        export GITHUB_ACCESS_TOKEN="$(bitwardenField 'GITHUB_TOKEN' '.CLI.value')"
      fi
    fi
  elif [[ "$BW_PATH" == /mnt/* ]]; then
    echo "‚ö†Ô∏è  Found Windows Bitwarden CLI - use '/snap/bin/bw' for Linux version"
  elif timeout 5 bw --version >/dev/null 2>&1; then
    if ! bw status | grep -q "authenticated" 2>/dev/null; then
      echo "üîê Bitwarden CLI available but not authenticated"
      echo "Run 'bw login' to authenticate when ready"
    else
      if command -v jq >/dev/null 2>&1; then
        export GITHUB_ACCESS_TOKEN="$(bitwardenField 'GITHUB_TOKEN' '.CLI.value')"
      fi
    fi
  else
    echo "‚ö†Ô∏è  Bitwarden CLI found but not working - try '/snap/bin/bw' instead"
  fi
else
  echo "‚ÑπÔ∏è  Bitwarden CLI not found - check installation scripts"
fi
{{ end -}}

export GOBIN=$HOME/.local/bin
export GOPATH=$HOME
export GO111MODULE=on
export LANG=en_CA.UTF-8
export LC_ALL=en_CA.UTF-8
export RIPGREP_CONFIG_PATH=~/.config/ripgrep/config

# Powerlevel10k config
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

{{ if stat (joinPath .chezmoi.homeDir ".nvm") }}
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
{{ end }}

{{- /* vim: set filetype=zsh: */}}